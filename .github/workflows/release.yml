name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check if preview release
        id: check_preview
        run: |
          if [[ "${{ github.ref_name }}" == *"preview"* ]]; then
            echo "is_preview=true" >> $GITHUB_OUTPUT
          else
            echo "is_preview=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.check_preview.outputs.is_preview }}

  build:
    name: Build
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: toggl-timeguru-v${{ needs.create-release.outputs.version }}-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: toggl-timeguru-v${{ needs.create-release.outputs.version }}-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: toggl-timeguru-v${{ needs.create-release.outputs.version }}-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: toggl-timeguru-v${{ needs.create-release.outputs.version }}-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: toggl-timeguru-v${{ needs.create-release.outputs.version }}-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (cross)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }}

      - name: Build (native)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux)
        if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: strip target/${{ matrix.target }}/release/toggl-timeguru

      - name: Strip binary (macOS)
        if: runner.os == 'macOS'
        run: strip target/${{ matrix.target }}/release/toggl-timeguru

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/toggl-timeguru ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        run: |
          Copy-Item target/${{ matrix.target }}/release/toggl-timeguru.exe ${{ matrix.asset_name }}

      - name: Generate SHA256 checksum (Unix)
        if: runner.os != 'Windows'
        run: |
          sha256sum ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256

      - name: Generate SHA256 checksum (Windows)
        if: runner.os == 'Windows'
        run: |
          $hash = (Get-FileHash -Path ${{ matrix.asset_name }} -Algorithm SHA256).Hash.ToLower()
          "$hash  ${{ matrix.asset_name }}" | Out-File -FilePath ${{ matrix.asset_name }}.sha256 -Encoding ASCII

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.sha256
          asset_name: ${{ matrix.asset_name }}.sha256
          asset_content_type: text/plain
